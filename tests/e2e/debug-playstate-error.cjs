const puppeteer = require('puppeteer');

async function debugPlayStateError() {
    console.log('üîç PlayState„Ç®„É©„Éº„Éá„Éê„ÉÉ„Ç∞\n');
    
    const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„Å®„É≠„Ç∞„ÇíÊçïÊçâ
    const logs = [];
    page.on('console', msg => {
        logs.push({
            type: msg.type(),
            text: msg.text()
        });
        if (msg.type() === 'error') {
            console.log('‚ùå ERROR:', msg.text());
        }
    });
    
    page.on('pageerror', error => {
        console.log('‚ùå PAGE ERROR:', error.message);
    });
    
    try {
        await page.goto('http://localhost:3000/', { waitUntil: 'networkidle0' });
        
        // „É°„Éã„É•„Éº„Åæ„ÅßÂæÖÊ©ü
        await page.waitForFunction(
            () => window.game?.stateManager?.currentState?.name === 'menu' &&
                  window.game?.stateManager?.currentState?.optionsAlpha >= 1,
            { timeout: 10000 }
        );
        
        console.log('‚úÖ „É°„Éã„É•„ÉºÊ∫ñÂÇôÂÆå‰∫Ü\n');
        
        // Space„Ç≠„Éº„ÇíÊäº„Åó„Å¶„Ç≤„Éº„É†ÈñãÂßã
        console.log('üéÆ „Ç≤„Éº„É†ÈñãÂßã...');
        await page.keyboard.press('Space');
        
        // Áä∂ÊÖãÈÅ∑Áßª„ÇíÂæÖ„Å§Ôºà„Ç®„É©„Éº„ÇÇÂê´„ÇÅ„Å¶Ôºâ
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // ÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
        const stateInfo = await page.evaluate(() => {
            const stateManager = window.game?.stateManager;
            const currentState = stateManager?.currentState;
            
            // PlayState„ÇØ„É©„Çπ„ÅÆÂ≠òÂú®Á¢∫Ë™ç
            const hasPlayStateClass = typeof window.PlayState !== 'undefined';
            
            // „Ç®„É©„ÉºÊÉÖÂ†±„ÅÆÂèéÈõÜ
            let errorInfo = null;
            if (stateManager?.lastError) {
                errorInfo = {
                    message: stateManager.lastError.message,
                    stack: stateManager.lastError.stack
                };
            }
            
            return {
                currentStateName: currentState?.name,
                hasStateManager: !!stateManager,
                hasPlayStateClass,
                errorInfo,
                stateKeys: currentState ? Object.keys(currentState) : []
            };
        });
        
        console.log('üìä Áä∂ÊÖãÊÉÖÂ†±:');
        console.log('  ÁèæÂú®„ÅÆÁä∂ÊÖã:', stateInfo.currentStateName);
        console.log('  StateManagerÂ≠òÂú®:', stateInfo.hasStateManager);
        console.log('  PlayState„ÇØ„É©„ÇπÂ≠òÂú®:', stateInfo.hasPlayStateClass);
        console.log('  „Ç®„É©„ÉºÊÉÖÂ†±:', stateInfo.errorInfo);
        console.log('  State Keys:', stateInfo.stateKeys);
        
        // „Ç®„É©„Éº„É≠„Ç∞Á¢∫Ë™ç
        console.log('\nüìã „Ç®„É©„Éº„É≠„Ç∞:');
        logs.filter(log => log.type === 'error').forEach(log => {
            console.log('  -', log.text);
        });
        
        // ÊúÄËøë„ÅÆ„É≠„Ç∞
        console.log('\nüìã ÊúÄËøë„ÅÆ„É≠„Ç∞ (ÊúÄÂæå„ÅÆ10‰ª∂):');
        logs.slice(-10).forEach(log => {
            console.log(`  [${log.type}] ${log.text}`);
        });
        
    } catch (error) {
        console.error('‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error.message);
    } finally {
        await browser.close();
    }
}

debugPlayStateError();