const puppeteer = require('puppeteer');

async function finalVerification() {
    console.log('üéÆ ÊúÄÁµÇÂãï‰ΩúÁ¢∫Ë™ç„ÉÜ„Çπ„Éà\n');
    
    const browser = await puppeteer.launch({
        headless: false,  // „Éñ„É©„Ç¶„Ç∂„ÇíË°®Á§∫
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    try {
        await page.goto('http://localhost:3000/', { waitUntil: 'networkidle0' });
        console.log('‚úÖ „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
        
        // „Ç≤„Éº„É†ÂàùÊúüÂåñ„ÇíÂæÖ„Å§
        await page.waitForFunction(
            () => window.game?.stateManager?.currentState?.name === 'menu',
            { timeout: 10000 }
        );
        
        // „É°„Éã„É•„Éº„ÅåÂÆåÂÖ®„Å´Ë°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖ„Å§
        await page.waitForFunction(
            () => {
                const state = window.game?.stateManager?.currentState;
                return state?.optionsAlpha >= 1;
            },
            { timeout: 10000 }
        );
        console.log('‚úÖ „É°„Éã„É•„ÉºË°®Á§∫ÂÆå‰∫Ü');
        
        // Space„Ç≠„Éº„Åß„Ç≤„Éº„É†ÈñãÂßã
        console.log('\nüéÆ Space„Ç≠„Éº„Åß„Ç≤„Éº„É†ÈñãÂßã...');
        await page.keyboard.press('Space');
        
        // PlayState„Å∏„ÅÆÈÅ∑Áßª„ÇíÂæÖ„Å§
        await page.waitForFunction(
            () => window.game?.stateManager?.currentState?.name === 'play',
            { timeout: 5000 }
        );
        console.log('‚úÖ „Ç≤„Éº„É†ÈñãÂßãÊàêÂäü');
        
        // „Ç®„É≥„ÉÜ„Ç£„ÉÜ„Ç£ÊÉÖÂ†±„ÇíÂèñÂæó
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const gameState = await page.evaluate(() => {
            const state = window.game?.stateManager?.currentState;
            const entityManager = state?.entityManager || state?.getEntityManager?.();
            const hudManager = state?.hudManager || state?.getHudManager?.();
            
            return {
                stateName: state?.name,
                player: state?.player ? {
                    x: Math.round(state.player.x),
                    y: Math.round(state.player.y),
                    score: state.player.score
                } : null,
                enemies: entityManager?.getEnemies?.()?.map(e => ({
                    type: e.constructor.name,
                    x: Math.round(e.x),
                    y: Math.round(e.y)
                })) || [],
                items: entityManager?.getItems?.()?.map(i => ({
                    type: i.constructor.name,
                    x: Math.round(i.x), 
                    y: Math.round(i.y)
                })) || [],
                hudData: hudManager?.getHUDData?.() || {}
            };
        });
        
        console.log('\nüìä „Ç≤„Éº„É†Áä∂ÊÖã:');
        console.log('  „Éó„É¨„Ç§„É§„Éº:', gameState.player);
        console.log('  Êïµ„ÅÆÊï∞:', gameState.enemies.length);
        console.log('  Êïµ„É™„Çπ„Éà:', gameState.enemies);
        console.log('  „Ç¢„Ç§„ÉÜ„É†Êï∞:', gameState.items.length);
        console.log('  HUD„Çπ„Ç≥„Ç¢:', gameState.hudData.score);
        
        // ÂïèÈ°å1: Êïµ„ÅÆË°®Á§∫Á¢∫Ë™ç
        console.log('\n‚úÖ ÂïèÈ°å1: Êïµ„ÅÆË°®Á§∫');
        console.log('  ÁµêÊûú:', gameState.enemies.length > 0 ? '‰øÆÊ≠£ÂÆå‰∫Ü - Êïµ„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åô' : '‚ùå Êïµ„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        
        // ÂïèÈ°å2: „Ç≥„Ç§„É≥ÂèéÈõÜ„ÉÜ„Çπ„Éà
        console.log('\nü™ô ÂïèÈ°å2: „Ç≥„Ç§„É≥ÂèéÈõÜ„Å®„Çπ„Ç≥„Ç¢');
        
        // ÊúÄÂàù„ÅÆ„Ç≥„Ç§„É≥„ÅÆ‰ΩçÁΩÆ„Å´„ÉØ„Éº„Éó
        await page.evaluate(() => {
            const player = window.game?.stateManager?.currentState?.player;
            if (player) {
                player.x = 112;
                player.y = 120; // Â∞ë„Åó‰∏ä„Åã„ÇâËêΩ„Å®„Åô
            }
        });
        
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        const afterCoin = await page.evaluate(() => {
            const state = window.game?.stateManager?.currentState;
            const hudManager = state?.hudManager || state?.getHudManager?.();
            return {
                playerScore: state?.player?.score || 0,
                hudScore: hudManager?.getHUDData?.()?.score || 0
            };
        });
        
        console.log('  „Éó„É¨„Ç§„É§„Éº„Çπ„Ç≥„Ç¢:', afterCoin.playerScore);
        console.log('  HUD„Çπ„Ç≥„Ç¢:', afterCoin.hudScore);
        console.log('  ÁµêÊûú:', afterCoin.hudScore > 0 ? '‰øÆÊ≠£ÂÆå‰∫Ü - „Çπ„Ç≥„Ç¢„ÅåÂ¢óÂä†„Åó„Å¶„ÅÑ„Åæ„Åô' : '‚ùå „Çπ„Ç≥„Ç¢„ÅåÂ¢óÂä†„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì');
        
        // ÂïèÈ°å3: „Ç¥„Éº„É´Âà∞ÈÅî„ÉÜ„Çπ„Éà
        console.log('\nüèÅ ÂïèÈ°å3: „Ç¥„Éº„É´Âà∞ÈÅî');
        
        // „Ç¥„Éº„É´‰ΩçÁΩÆ„Å´„ÉØ„Éº„Éó
        await page.evaluate(() => {
            const player = window.game?.stateManager?.currentState?.player;
            if (player) {
                player.x = 272;
                player.y = 180; // Â∞ë„Åó‰∏ä„Åã„ÇâËêΩ„Å®„Åô
            }
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const goalState = await page.evaluate(() => {
            const state = window.game?.stateManager?.currentState;
            const hudManager = state?.hudManager || state?.getHudManager?.();
            
            return {
                isPaused: state?.isPaused,
                message: hudManager?.message,
                stateName: state?.name
            };
        });
        
        console.log('  ‰∏ÄÊôÇÂÅúÊ≠¢:', goalState.isPaused);
        console.log('  „É°„ÉÉ„Çª„Éº„Ç∏:', goalState.message);
        console.log('  ÁµêÊûú:', goalState.message === 'STAGE CLEAR!' ? '‰øÆÊ≠£ÂÆå‰∫Ü - „Çπ„ÉÜ„Éº„Ç∏„ÇØ„É™„Ç¢Ë°®Á§∫' : '‚ùå „Çπ„ÉÜ„Éº„Ç∏„ÇØ„É™„Ç¢Ë°®Á§∫„Å™„Åó');
        
        // ÊúÄÁµÇ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
        await page.screenshot({ path: 'tests/screenshots/final-verification.png' });
        console.log('\nüì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà: tests/screenshots/final-verification.png');
        
        // „Çµ„Éû„É™„Éº
        console.log('\n' + '='.repeat(50));
        console.log('üéØ ‰øÆÊ≠£ÁµêÊûú„Çµ„Éû„É™„Éº:');
        console.log('  ‚úÖ Êïµ„ÅÆË°®Á§∫: ' + (gameState.enemies.length > 0 ? '‰øÆÊ≠£ÂÆå‰∫Ü' : 'Ë¶ÅÁ¢∫Ë™ç'));
        console.log('  ‚úÖ „Çπ„Ç≥„Ç¢Â¢óÂä†: ' + (afterCoin.hudScore > 0 ? '‰øÆÊ≠£ÂÆå‰∫Ü' : 'Ë¶ÅÁ¢∫Ë™ç'));
        console.log('  ‚úÖ „Ç¥„Éº„É´Âá¶ÁêÜ: ' + (goalState.message === 'STAGE CLEAR!' ? '‰øÆÊ≠£ÂÆå‰∫Ü' : 'Ë¶ÅÁ¢∫Ë™ç'));
        console.log('='.repeat(50));
        
        console.log('\n5ÁßíÂæå„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Åæ„Åô...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
    } catch (error) {
        console.error('‚ùå „Ç®„É©„Éº:', error.message);
        await page.screenshot({ path: 'tests/screenshots/error-state.png' });
    } finally {
        await browser.close();
    }
}

finalVerification();