const puppeteer = require('puppeteer');

async function simpleGameTest() {
    console.log('üîç „Ç∑„É≥„Éó„É´„Ç≤„Éº„É†„ÉÜ„Çπ„Éà\n');
    
    const browser = await puppeteer.launch({
        headless: false,  // Show browser to see what's happening
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // „É≠„Ç∞„ÇíË®òÈå≤
    page.on('console', msg => {
        if (msg.type() === 'error') {
            console.log('‚ùå ERROR:', msg.text());
        }
    });
    
    try {
        await page.goto('http://localhost:3000/', { waitUntil: 'networkidle0' });
        console.log('‚úÖ „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
        
        // ÂàùÊúüÂåñ„ÇíÂæÖ„Å§
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // „É°„Éã„É•„Éº„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖ„Å§
        await page.waitForFunction(
            () => {
                const state = window.game?.stateManager?.currentState;
                return state?.name === 'menu' && state?.optionsAlpha >= 1;
            },
            { timeout: 10000 }
        );
        console.log('‚úÖ „É°„Éã„É•„ÉºË°®Á§∫ÂÆå‰∫Ü');
        
        // Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶„Ç≤„Éº„É†ÈñãÂßã
        console.log('üéÆ Enter„Ç≠„Éº„ÇíÊäº„Åó„Å¶„Ç≤„Éº„É†ÈñãÂßã...');
        await page.keyboard.press('Enter');
        
        // Â∞ë„ÅóÂæÖ„Å§
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // „Ç≤„Éº„É†Áä∂ÊÖã„ÇíÁ¢∫Ë™ç
        const gameInfo = await page.evaluate(() => {
            const state = window.game?.stateManager?.currentState;
            const entityManager = state?.entityManager || state?.getEntityManager?.();
            
            return {
                stateName: state?.name,
                hasPlayer: !!state?.player,
                enemies: entityManager?.getEnemies?.()?.length || 0,
                items: entityManager?.getItems?.()?.length || 0
            };
        });
        
        console.log('\nüìä „Ç≤„Éº„É†ÊÉÖÂ†±:');
        console.log('  ÁèæÂú®„ÅÆÁä∂ÊÖã:', gameInfo.stateName);
        console.log('  „Éó„É¨„Ç§„É§„Éº:', gameInfo.hasPlayer ? 'Â≠òÂú®' : '„Å™„Åó');
        console.log('  Êïµ„ÅÆÊï∞:', gameInfo.enemies);
        console.log('  „Ç¢„Ç§„ÉÜ„É†„ÅÆÊï∞:', gameInfo.items);
        
        // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
        await page.screenshot({ path: 'tests/screenshots/simple-test.png' });
        console.log('\nüì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà: tests/screenshots/simple-test.png');
        
        console.log('\n5ÁßíÂæå„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Åæ„Åô...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
    } catch (error) {
        console.error('‚ùå „Ç®„É©„Éº:', error.message);
    } finally {
        await browser.close();
    }
}

simpleGameTest();