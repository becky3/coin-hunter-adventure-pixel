const puppeteer = require('puppeteer');

async function checkGameInit() {
    console.log('üîç „Ç≤„Éº„É†ÂàùÊúüÂåñÁ¢∫Ë™ç\n');
    
    const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // ÂàùÊúüÂåñ„É≠„Ç∞„ÇíË®òÈå≤
    const initLogs = [];
    page.on('console', msg => {
        const text = msg.text();
        if (text.includes('Registering states') || 
            text.includes('registerState') || 
            text.includes('MenuState') || 
            text.includes('PlayState')) {
            console.log('üìù INIT LOG:', text);
            initLogs.push(text);
        }
    });
    
    try {
        await page.goto('http://localhost:3000/', { waitUntil: 'networkidle0' });
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // „Ç≤„Éº„É†ÊßãÈÄ†„ÇíÁ¢∫Ë™ç
        const gameStructure = await page.evaluate(() => {
            const game = window.game;
            if (!game) return { hasGame: false };
            
            // GameCore„ÅÆÊßãÈÄ†„ÇíÁ¢∫Ë™ç
            const stateManager = game.stateManager;
            const states = stateManager?.states;
            
            // States„ÅÆË©≥Á¥∞„ÇíÂèñÂæó
            let stateDetails = {};
            if (states instanceof Map) {
                for (let [key, value] of states) {
                    stateDetails[key] = {
                        name: value.name,
                        constructor: value.constructor.name
                    };
                }
            }
            
            return {
                hasGame: true,
                hasStateManager: !!stateManager,
                statesType: states ? states.constructor.name : 'null',
                stateCount: states ? states.size : 0,
                stateDetails,
                currentState: stateManager?.currentState?.name
            };
        });
        
        console.log('\nüìä „Ç≤„Éº„É†ÊßãÈÄ†:', JSON.stringify(gameStructure, null, 2));
        
        // registerState„É°„ÇΩ„ÉÉ„Éâ„ÇíÊâãÂãï„ÅßÂëº„Å∂
        console.log('\nüîß ÊâãÂãï„ÅßÁä∂ÊÖã„ÇíÁôªÈå≤...');
        const manualRegister = await page.evaluate(() => {
            try {
                const stateManager = window.game?.stateManager;
                
                // PlayState„ÇØ„É©„Çπ„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
                const hasPlayStateClass = typeof window.PlayState !== 'undefined';
                
                if (!hasPlayStateClass) {
                    // „É¢„Ç∏„É•„Éº„É´„Åã„ÇâÂãïÁöÑ„Å´„Ç§„É≥„Éù„Éº„Éà„ÇíË©¶„Åø„Çã
                    return { error: 'PlayState class not found in window' };
                }
                
                // ÊâãÂãï„ÅßÁôªÈå≤
                const playState = new window.PlayState(window.game);
                stateManager.registerState(playState);
                
                return {
                    success: true,
                    stateCount: stateManager.states.size
                };
            } catch (error) {
                return {
                    error: error.message,
                    stack: error.stack
                };
            }
        });
        
        console.log('ÊâãÂãïÁôªÈå≤ÁµêÊûú:', manualRegister);
        
        // ÂàùÊúüÂåñ„É≠„Ç∞„ÅÆÁ¢∫Ë™ç
        console.log('\nüìã ÂàùÊúüÂåñ„É≠„Ç∞:');
        initLogs.forEach(log => console.log('  -', log));
        
    } catch (error) {
        console.error('‚ùå „Ç®„É©„Éº:', error.message);
    } finally {
        await browser.close();
    }
}

checkGameInit();